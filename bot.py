import discord
from discord.ext import commands
import os
import asyncio
from datetime import datetime, timedelta

# CONFIGURA√á√ïES - COLE OS IDs CORRETOS AQUI
CONFIG = {
    'aguardando_cargo_id': 1422448963625287761,
    'aprovado_cargo_id': 1421001020938522641,
    'canal_formulario_id': 1423057145875792003,
    'canal_aprovacao_id': 1423055315259363449,
    'log_channel_id': 1423051035575848963,
    'cargo_gerente_id': 1421001020955430985,
    'canal_acoes_id': 1421001024482840666,  # Canal para a√ß√µes (pode ser o mesmo do formul√°rio)
    'prefixo': '!'
}

# Dados para formul√°rios e registros
formularios_ativos = {}
registro_membros = {}
recrutamento_data = {}
acoes_ativas = {}  # Sistema de a√ß√µes
hierarquia_roles = {  # Configura√ß√£o das hierarquias
    '[00]': 'üëë„ÉªL√çDER',
    '[01]': 'üëë„ÉªL√çDER',
    '[02]': 'üëë„ÉªL√çDER',
    '[03]': 'üëë„ÉªL√çDER',
    '[04]': 'üëë„ÉªL√çDER', 
    '[SUB]': 'üí´„ÉªSUB L√çDER',
    '[GG]': '‚ò†Ô∏è„ÉªGERENTE GERAL',
    '[REC]': 'üìë„ÉªGERENTE RECRUTADOR',
    '[LEL]': 'üî´„ÉªL√çDER ELITE',
    '[GE]': 'üî´„ÉªGERENTE ELITE',
    '[GA]': 'üéØ„ÉªGERENTE A√á√ÉO'
}

intents = discord.Intents.all()
bot = commands.Bot(command_prefix=CONFIG['prefixo'], intents=intents)

# ========== SISTEMA DE FORMUL√ÅRIO ==========
class IniciarFormularioView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üìù Preencher Formul√°rio", style=discord.ButtonStyle.primary, custom_id="iniciar_formulario")
    async def iniciar_formulario(self, interaction: discord.Interaction, button: discord.ui.Button):
        user_roles = [role.id for role in interaction.user.roles]
        
        if CONFIG['aprovado_cargo_id'] in user_roles:
            await interaction.response.send_message("‚úÖ Voc√™ j√° foi aprovado!", ephemeral=True)
            return

        if CONFIG['aguardando_cargo_id'] not in user_roles:
            await interaction.response.send_message("‚ùå Voc√™ n√£o est√° na lista de espera.", ephemeral=True)
            return

        if interaction.user.id in formularios_ativos:
            await interaction.response.send_message("‚ùå Voc√™ j√° tem um formul√°rio em andamento.", ephemeral=True)
            return

        formularios_ativos[interaction.user.id] = {
            'respostas': [],
            'etapa': 0,
            'interaction': interaction
        }

        await enviar_pergunta_formulario(interaction.user)

async def enviar_pergunta_formulario(usuario):
    if usuario.id not in formularios_ativos:
        return

    formulario = formularios_ativos[usuario.id]
    etapa = formulario['etapa']
    interaction = formulario['interaction']
    
    perguntas = [
        "üéÆ **Qual seu Nome In-Game?**\n\n*Este ser√° seu nickname no servidor*",
        "üÜî **Qual seu ID do Jogo?**\n\n*Digite apenas n√∫meros*", 
        "üë• **Qual o ID do seu Recrutador?**\n\n*Digite apenas n√∫meros*"
    ]
    
    if etapa >= len(perguntas):
        await finalizar_formulario(usuario)
        return

    try:
        embed = discord.Embed(
            title=f"üìã FORMUL√ÅRIO (Pergunta {etapa + 1}/3)",
            description=perguntas[etapa],
            color=0x0099ff
        )
        
        if etapa == 0:
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.followup.send(embed=embed, ephemeral=True)
        
        await aguardar_resposta_formulario(usuario, interaction.channel)
        
    except Exception as e:
        print(f"Erro ao enviar pergunta: {e}")
        if usuario.id in formularios_ativos:
            del formularios_ativos[usuario.id]

async def aguardar_resposta_formulario(usuario, canal):
    if usuario.id not in formularios_ativos:
        return

    def check(m):
        return (m.channel.id == canal.id and
                m.author.id == usuario.id and
                not m.content.startswith(CONFIG['prefixo']) and
                len(m.content.strip()) > 0)

    try:
        resposta = await bot.wait_for('message', check=check, timeout=300)
        
        formulario = formularios_ativos[usuario.id]
        etapa = formulario['etapa']
        
        if etapa == 1:
            if not resposta.content.strip().isdigit():
                await canal.send("‚ùå **ID do Jogo deve conter apenas n√∫meros!** Tente novamente:", delete_after=10)
                return await aguardar_resposta_formulario(usuario, canal)
                
        elif etapa == 2:
            if not resposta.content.strip().isdigit():
                await canal.send("‚ùå **ID do Recrutador deve conter apenas n√∫meros!** Tente novamente:", delete_after=10)
                return await aguardar_resposta_formulario(usuario, canal)
        
        formulario['respostas'].append(resposta.content.strip())
        formulario['etapa'] += 1
        
        try:
            await resposta.delete()
        except:
            pass
        
        interaction = formulario['interaction']
        if formulario['etapa'] < 3:
            await interaction.followup.send(f"‚úÖ **Resposta {formulario['etapa']}/3 registrada!**", ephemeral=True)
            await enviar_pergunta_formulario(usuario)
        else:
            await interaction.followup.send(f"‚úÖ **Resposta {formulario['etapa']}/3 registrada!**\n\nEnviando formul√°rio...", ephemeral=True)
            await finalizar_formulario(usuario)
            
    except asyncio.TimeoutError:
        if usuario.id in formularios_ativos:
            del formularios_ativos[usuario.id]
        try:
            interaction = formularios_ativos[usuario.id]['interaction']
            await interaction.followup.send("‚è∞ **Formul√°rio expirado!**", ephemeral=True)
        except:
            pass

async def finalizar_formulario(usuario):
    if usuario.id not in formularios_ativos:
        return

    formulario = formularios_ativos[usuario.id]
    
    if len(formulario['respostas']) != 3:
        try:
            interaction = formulario['interaction']
            await interaction.followup.send("‚ùå **Formul√°rio incompleto!**", ephemeral=True)
        except:
            pass
        del formularios_ativos[usuario.id]
        return

    try:
        embed = discord.Embed(title="‚úÖ FORMUL√ÅRIO ENVIADO!", color=0x00ff00)
        embed.add_field(name="üéÆ Nome In-Game", value=formulario['respostas'][0], inline=True)
        embed.add_field(name="üÜî ID do Jogo", value=formulario['respostas'][1], inline=True)
        embed.add_field(name="üë• ID Recrutador", value=formulario['respostas'][2], inline=True)
        embed.add_field(name="üìä Status", value="Aguardando aprova√ß√£o...", inline=False)
        
        interaction = formulario['interaction']
        await interaction.followup.send(embed=embed, ephemeral=True)

        await enviar_para_aprovacao(usuario, formulario['respostas'])
        del formularios_ativos[usuario.id]

    except Exception as e:
        print(f"Erro ao finalizar formul√°rio: {e}")
        if usuario.id in formularios_ativos:
            del formularios_ativos[usuario.id]

async def enviar_para_aprovacao(usuario, respostas):
    canal_aprovacao = bot.get_channel(CONFIG['canal_aprovacao_id'])
    if canal_aprovacao:
        try:
            embed = discord.Embed(
                title="üìã NOVO FORMUL√ÅRIO PARA APROVA√á√ÉO", 
                color=0xffff00, 
                timestamp=datetime.now()
            )
            embed.add_field(name="üë§ USU√ÅRIO", value=f"{usuario.mention} ({usuario.name})", inline=False)
            embed.add_field(name="üéÆ Nome In-Game", value=respostas[0], inline=True)
            embed.add_field(name="üÜî ID do Jogo", value=respostas[1], inline=True)
            embed.add_field(name="üë• ID Recrutador", value=respostas[2], inline=True)
            embed.add_field(name="üÜî ID Discord", value=usuario.id, inline=True)

            view = AprovacaoView(usuario.id, respostas[0], respostas[1], respostas[2])
            await canal_aprovacao.send(embed=embed, view=view)

        except Exception as e:
            print(f"Erro ao enviar para aprova√ß√£o: {e}")

class AprovacaoView(discord.ui.View):
    def __init__(self, usuario_id, nome_in_game, id_jogo, id_recrutador):
        super().__init__(timeout=None)
        self.usuario_id = usuario_id
        self.nome_in_game = nome_in_game
        self.id_jogo = id_jogo
        self.id_recrutador = id_recrutador

    @discord.ui.button(label="‚úÖ APROVAR", style=discord.ButtonStyle.success, custom_id="aprovar")
    async def aprovar(self, interaction: discord.Interaction, button: discord.ui.Button):
        if CONFIG['cargo_gerente_id'] not in [role.id for role in interaction.user.roles]:
            await interaction.response.send_message("‚ùå Apenas gerentes podem aprovar.", ephemeral=True)
            return

        guild = interaction.guild
        usuario = guild.get_member(self.usuario_id)

        if not usuario:
            await interaction.response.send_message("‚ùå Usu√°rio n√£o encontrado.", ephemeral=True)
            return

        try:
            cargo_aguardando = guild.get_role(CONFIG['aguardando_cargo_id'])
            cargo_aprovado = guild.get_role(CONFIG['aprovado_cargo_id'])
            
            if cargo_aguardando and cargo_aguardando in usuario.roles:
                await usuario.remove_roles(cargo_aguardando)
            if cargo_aprovado:
                await usuario.add_roles(cargo_aprovado)

            try:
                novo_nickname = f"{self.nome_in_game} | {self.id_jogo}"
                await usuario.edit(nick=novo_nickname)
            except:
                pass

            data_aprovacao = datetime.now()
            registro_membros[usuario.id] = {
                'nome_in_game': self.nome_in_game,
                'id_jogo': self.id_jogo,
                'id_recrutador': self.id_recrutador,
                'data_aprovacao': data_aprovacao
            }

            if self.id_recrutador not in recrutamento_data:
                recrutamento_data[self.id_recrutador] = []
            
            recrutamento_data[self.id_recrutador].append({
                'id_jogo': self.id_jogo,
                'nome_in_game': self.nome_in_game,
                'data_recrutamento': data_aprovacao,
                'recrutador': self.id_recrutador
            })

            embed = interaction.message.embeds[0]
            embed.color = 0x00ff00
            embed.add_field(name="‚úÖ STATUS", value=f"Aprovado por {interaction.user.mention}", inline=False)
            await interaction.message.edit(embed=embed, view=None)
            
            await interaction.response.send_message("‚úÖ Usu√°rio aprovado!", ephemeral=True)

            try:
                embed = discord.Embed(
                    title="üéâ PARAB√âNS!",
                    description=f"Seu formul√°rio foi **APROVADO**!\n\n**Nickname:** {novo_nickname}",
                    color=0x00ff00
                )
                await usuario.send(embed=embed)
            except:
                pass

            await registrar_log(guild, "‚úÖ MEMBRO APROVADO", f"{usuario.mention} aprovado | Recrutador: {self.id_recrutador}", 0x00ff00)

        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erro: {e}", ephemeral=True)

    @discord.ui.button(label="‚ùå REPROVAR", style=discord.ButtonStyle.danger, custom_id="reprovar")
    async def reprovar(self, interaction: discord.Interaction, button: discord.ui.Button):
        if CONFIG['cargo_gerente_id'] not in [role.id for role in interaction.user.roles]:
            await interaction.response.send_message("‚ùå Apenas gerentes podem reprovar.", ephemeral=True)
            return

        guild = interaction.guild
        usuario = guild.get_member(self.usuario_id)

        if not usuario:
            await interaction.response.send_message("‚ùå Usu√°rio n√£o encontrado.", ephemeral=True)
            return

        try:
            await usuario.edit(roles=[])
            
            embed = interaction.message.embeds[0]
            embed.color = 0xff0000
            embed.add_field(name="‚ùå STATUS", value=f"Reprovado por {interaction.user.mention}", inline=False)
            await interaction.message.edit(embed=embed, view=None)
            
            await interaction.response.send_message("‚ùå Usu√°rio reprovado!", ephemeral=True)
            
            try:
                embed = discord.Embed(
                    title="‚ùå REPROVADO",
                    description="Seu formul√°rio foi reprovado.",
                    color=0xff0000
                )
                await usuario.send(embed=embed)
            except:
                pass
            
            await registrar_log(guild, "‚ùå MEMBRO REPROVADO", f"{usuario.mention} reprovado", 0xff0000)
            await usuario.kick(reason="Reprovado")

        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erro: {e}", ephemeral=True)

# ========== SISTEMA DE A√á√ïES CORRIGIDO ==========
class AcaoView(discord.ui.View):
    def __init__(self, acao_id):
        super().__init__(timeout=None)
        self.acao_id = acao_id

    @discord.ui.button(label="‚úÖ Participar", style=discord.ButtonStyle.success, custom_id="participar_acao")
    async def participar_acao(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.acao_id not in acoes_ativas:
            await interaction.response.send_message("‚ùå Esta a√ß√£o n√£o est√° mais dispon√≠vel.", ephemeral=True)
            return

        acao = acoes_ativas[self.acao_id]
        
        # Verifica se j√° est√° participando
        if interaction.user.id in acao['participantes']:
            await interaction.response.send_message("‚ùå Voc√™ j√° est√° participando desta a√ß√£o!", ephemeral=True)
            return

        # Verifica se h√° vagas dispon√≠veis
        if len(acao['participantes']) >= acao['vagas']:
            await interaction.response.send_message("‚ùå N√£o h√° mais vagas dispon√≠veis para esta a√ß√£o!", ephemeral=True)
            return

        # Adiciona participante
        acao['participantes'][interaction.user.id] = {
            'nome': interaction.user.display_name,
            'adicionado_em': datetime.now()
        }

        # Atualiza a mensagem da a√ß√£o
        await atualizar_mensagem_acao(acao)

        await interaction.response.send_message(
            f"‚úÖ **Voc√™ foi adicionado √† a√ß√£o!**\n"
            f"**A√ß√£o:** {acao['nome']}\n"
            f"**Data:** {acao['data']}\n"
            f"**Vaga:** {len(acao['participantes'])}/{acao['vagas']}",
            ephemeral=True
        )

    @discord.ui.button(label="üëÄ Ver Lista", style=discord.ButtonStyle.primary, custom_id="ver_lista_acao")
    async def ver_lista_acao(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.acao_id not in acoes_ativas:
            await interaction.response.send_message("‚ùå Esta a√ß√£o n√£o est√° mais dispon√≠vel.", ephemeral=True)
            return

        acao = acoes_ativas[self.acao_id]
        
        if not acao['participantes']:
            await interaction.response.send_message("üìù **Nenhum participante ainda.**", ephemeral=True)
            return

        participantes_lista = "\n".join(
            f"‚Ä¢ {participante['nome']}" 
            for participante in acao['participantes'].values()
        )

        embed = discord.Embed(
            title=f"üë• PARTICIPANTES - {acao['nome']}",
            description=participantes_lista,
            color=0x0099ff
        )
        embed.add_field(name="üìä Total", value=f"{len(acao['participantes'])}/{acao['vagas']}", inline=True)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label="‚ùå Sair", style=discord.ButtonStyle.danger, custom_id="sair_acao")
    async def sair_acao(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.acao_id not in acoes_ativas:
            await interaction.response.send_message("‚ùå Esta a√ß√£o n√£o est√° mais dispon√≠vel.", ephemeral=True)
            return

        acao = acoes_ativas[self.acao_id]
        
        if interaction.user.id not in acao['participantes']:
            await interaction.response.send_message("‚ùå Voc√™ n√£o est√° participando desta a√ß√£o.", ephemeral=True)
            return

        # Remove participante
        participante = acao['participantes'][interaction.user.id]
        del acao['participantes'][interaction.user.id]

        # Atualiza a mensagem da a√ß√£o
        await atualizar_mensagem_acao(acao)

        await interaction.response.send_message(
            f"‚úÖ **Voc√™ saiu da a√ß√£o!**\n"
            f"**A√ß√£o:** {acao['nome']}\n"
            f"**Vagas restantes:** {len(acao['participantes'])}/{acao['vagas']}",
            ephemeral=True
        )

async def atualizar_mensagem_acao(acao):
    """Atualiza a mensagem da a√ß√£o com participantes atualizados"""
    try:
        canal = bot.get_channel(CONFIG['canal_acoes_id'])
        if canal and acao['mensagem_id']:
            mensagem = await canal.fetch_message(acao['mensagem_id'])
            
            # Determina a cor baseado nas vagas
            if len(acao['participantes']) >= acao['vagas']:
                cor = 0xff0000  # Vermelho quando lotado
            else:
                cor = 0x00ff00  # Verde quando h√° vagas
            
            embed = discord.Embed(
                title=f"‚öîÔ∏è A√á√ÉO: {acao['nome']}",
                color=cor
            )
            
            embed.add_field(name="üìÖ Data", value=acao['data'], inline=True)
            embed.add_field(name="üïê Hor√°rio", value=acao['hora'], inline=True)
            embed.add_field(name="üéØ Vagas", value=f"{len(acao['participantes'])}/{acao['vagas']}", inline=True)
            
            # Lista de participantes (m√°ximo 8 para n√£o ficar muito longo)
            if acao['participantes']:
                participantes_lista = "\n".join(
                    f"‚Ä¢ {p['nome']}" 
                    for p in list(acao['participantes'].values())[:8]
                )
                if len(acao['participantes']) > 8:
                    participantes_lista += f"\n‚Ä¢ ... e mais {len(acao['participantes']) - 8}"
            else:
                participantes_lista = "üìù Nenhum participante ainda"
            
            embed.add_field(name="üë• Participantes", value=participantes_lista, inline=False)
            
            # Instru√ß√µes baseadas no status
            if len(acao['participantes']) >= acao['vagas']:
                embed.add_field(name="üìù Status", value="üö´ **LOTADO** - N√£o h√° mais vagas", inline=False)
            else:
                embed.add_field(name="üìù Como participar", value="Clique em **‚úÖ Participar** abaixo", inline=False)
            
            embed.set_footer(text=f"ID: {acao['id']} ‚Ä¢ Use os bot√µes para gerenciar participa√ß√£o")

            # SEMPRE mant√©m todos os tr√™s bot√µes vis√≠veis
            view = AcaoView(acao['id'])
            await mensagem.edit(embed=embed, view=view)
            
    except Exception as e:
        print(f"Erro ao atualizar mensagem da a√ß√£o: {e}")

# ========== COMANDOS ==========
@bot.command()
@commands.has_permissions(administrator=True)
async def acao(ctx, vagas: int, data: str, hora: str, *, nome_acao: str):
    """Cria uma nova a√ß√£o: !acao 10 15/12 20:30 Nome da A√ß√£o"""
    try:
        acao_id = f"acao_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        acoes_ativas[acao_id] = {
            'id': acao_id,
            'nome': nome_acao,
            'vagas': vagas,
            'data': data,
            'hora': hora,
            'participantes': {},
            'criador': ctx.author.id,
            'criado_em': datetime.now(),
            'mensagem_id': None
        }

        embed = discord.Embed(
            title=f"‚öîÔ∏è NOVA A√á√ÉO: {nome_acao}",
            color=0x00ff00
        )
        
        embed.add_field(name="üìÖ Data", value=data, inline=True)
        embed.add_field(name="üïê Hora", value=hora, inline=True)
        embed.add_field(name="üéØ Vagas", value=f"0/{vagas}", inline=True)
        embed.add_field(name="üë• Participantes", value="üìù Nenhum participante ainda", inline=False)
        embed.add_field(name="üìù Como participar", value="Clique em **‚úÖ Participar** abaixo", inline=False)
        embed.set_footer(text=f"ID: {acao_id} ‚Ä¢ Criado por {ctx.author.display_name}")

        # View com TODOS os bot√µes desde o in√≠cio
        view = AcaoView(acao_id)
        mensagem = await ctx.send(embed=embed, view=view)
        
        acoes_ativas[acao_id]['mensagem_id'] = mensagem.id
        await ctx.send(f"‚úÖ **A√ß√£o criada com sucesso!**\n**ID:** `{acao_id}`")

    except Exception as e:
        await ctx.send(f"‚ùå Erro ao criar a√ß√£o: {e}")

@bot.command()
@commands.has_permissions(administrator=True)
async def fecharacao(ctx, acao_id: str):
    """Fecha uma a√ß√£o: !fecharacao acao_20231215_203000"""
    if acao_id not in acoes_ativas:
        await ctx.send("‚ùå A√ß√£o n√£o encontrada. Verifique o ID.")
        return

    acao = acoes_ativas[acao_id]
    
    # Cria relat√≥rio final
    embed = discord.Embed(
        title=f"üìã RELAT√ìRIO FINAL - {acao['nome']}",
        color=0xffa500
    )
    
    embed.add_field(name="üìÖ Data", value=acao['data'], inline=True)
    embed.add_field(name="üïê Hor√°rio", value=acao['hora'], inline=True)
    embed.add_field(name="‚úÖ Participantes", value=len(acao['participantes']), inline=True)
    embed.add_field(name="üéØ Vagas Ocupadas", value=f"{len(acao['participantes'])}/{acao['vagas']}", inline=True)

    # Lista de participantes
    if acao['participantes']:
        participantes_lista = "\n".join(
            f"‚Ä¢ {participante['nome']}" 
            for participante in acao['participantes'].values()
        )
        embed.add_field(name="üë• Lista de Participantes", value=participantes_lista, inline=False)
    else:
        embed.add_field(name="üë• Participantes", value="‚ùå Nenhum participante", inline=False)

    embed.set_footer(text=f"A√ß√£o encerrada por {ctx.author.display_name}")

    await ctx.send(embed=embed)
    
    # Remove a√ß√£o
    del acoes_ativas[acao_id]
    
    # Tenta deletar a mensagem original da a√ß√£o
    try:
        canal = bot.get_channel(CONFIG['canal_acoes_id'])
        if canal and acao['mensagem_id']:
            mensagem = await canal.fetch_message(acao['mensagem_id'])
            await mensagem.delete()
    except:
        pass

@bot.command()
async def hierarquia(ctx):
    """Mostra a hierarquia do servidor: !hierarquia"""
    try:
        guild = ctx.guild
        
        # Coleta membros e seus cargos
        membros_hierarquia = {}
        
        for member in guild.members:
            if member.bot:
                continue
                
            # Verifica tags de hierarquia no nickname
            nickname = member.display_name
            hierarquia_encontrada = None
            
            for tag, nome_hierarquia in hierarquia_roles.items():
                if tag in nickname:
                    hierarquia_encontrada = (tag, nome_hierarquia)
                    break
            
            if hierarquia_encontrada:
                tag, nome_hierarquia = hierarquia_encontrada
                if nome_hierarquia not in membros_hierarquia:
                    membros_hierarquia[nome_hierarquia] = []
                
                membros_hierarquia[nome_hierarquia].append(member)

        # Ordena hierarquias por ordem de import√¢ncia
        ordem_hierarquia = [
            'üëë„ÉªL√çDER',
            'üëë„ÉªL√çDER',
            ''üëë„ÉªL√çDER',
            'üëë„ÉªL√çDER',
            'üëë„ÉªL√çDER', 
            'üí´„ÉªSUB L√çDER',
            '‚ò†Ô∏è„ÉªGERENTE GERAL',
            'üìë„ÉªGERENTE RECRUTADOR',
            'üî´„ÉªL√çDER ELITE',
            'üî´„ÉªGERENTE ELITE',
            'üéØ„ÉªGERENTE A√á√ÉO'
        ]
        
        embed = discord.Embed(
            title="üèõÔ∏è HIERARQUIA DO SERVIDOR",
            description="Organiza√ß√£o dos membros por cargos",
            color=0x2b2d31
        )

        for hierarquia in ordem_hierarquia:
            if hierarquia in membros_hierarquia:
                membros = membros_hierarquia[hierarquia]
                
                # Ordena membros alfabeticamente
                membros.sort(key=lambda x: x.display_name.lower())
                
                # CORRE√á√ÉO: Mostra os nomes dos membros
                lista_membros = "\n".join(
                    f"‚Ä¢ {member.display_name}" 
                    for member in membros[:15]  # Limite de 15 por campo
                )
                
                if len(membros) > 15:
                    lista_membros += f"\n‚Ä¢ ... e mais {len(membros) - 15} membros"
                elif not lista_membros.strip():
                    lista_membros = "‚Ä¢ Nenhum membro nesta categoria"
                
                embed.add_field(
                    name=f"{hierarquia} ({len(membros)})",
                    value=lista_membros,
                    inline=False
                )

        total_membros = len([m for m in guild.members if not m.bot])
        embed.set_footer(text=f"Total de membros: {total_membros}")
        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå Erro ao gerar hierarquia: {e}")

@bot.command()
async def acoesativas(ctx):
    """Mostra a√ß√µes ativas: !acoesativas"""
    if not acoes_ativas:
        embed = discord.Embed(
            title="üìã A√á√ïES ATIVAS",
            description="Nenhuma a√ß√£o ativa no momento.",
            color=0x808080
        )
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üìã A√á√ïES ATIVAS",
        description=f"Total: {len(acoes_ativas)} a√ß√£o(√µes)",
        color=0x0099ff
    )

    for acao_id, acao in acoes_ativas.items():
        embed.add_field(
            name=f"‚öîÔ∏è {acao['nome']}",
            value=f"**Data:** {acao['data']}\n"
                  f"**Hora:** {acao['hora']}\n"
                  f"**Vagas:** {len(acao['participantes'])}/{acao['vagas']}\n"
                  f"**ID:** `{acao_id}`",
            inline=True
        )

    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def removerparticipante(ctx, acao_id: str, member: discord.Member):
    """Remove participante: !removerparticipante acao_123 @user"""
    if acao_id not in acoes_ativas:
        await ctx.send("‚ùå A√ß√£o n√£o encontrada.")
        return

    acao = acoes_ativas[acao_id]
    
    if member.id not in acao['participantes']:
        await ctx.send("‚ùå Usu√°rio n√£o est√° nesta a√ß√£o.")
        return

    participante = acao['participantes'][member.id]
    del acao['participantes'][member.id]

    await atualizar_mensagem_acao(acao)
    await ctx.send(f"‚úÖ **{member.display_name} removido da a√ß√£o!**")

# ========== COMANDOS EXISTENTES ==========
@bot.command()
@commands.has_permissions(administrator=True)
async def relatorio(ctx, periodo: str = "mensal"):
    """Relat√≥rio de recrutamento: !relatorio [mensal|30d|7d|total]"""
    try:
        agora = datetime.now()
        
        if periodo.lower() == "mensal":
            primeiro_dia = agora.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            titulo = "üìä RELAT√ìRIO MENSAL"
            periodo_str = primeiro_dia.strftime('%B/%Y')
        elif periodo.lower() == "30d":
            primeiro_dia = agora - timedelta(days=30)
            titulo = "üìä RELAT√ìRIO - 30 DIAS"
            periodo_str = f"√öltimos 30 dias"
        elif periodo.lower() == "7d":
            primeiro_dia = agora - timedelta(days=7)
            titulo = "üìä RELAT√ìRIO - 7 DIAS"
            periodo_str = f"√öltimos 7 dias"
        elif periodo.lower() == "total":
            primeiro_dia = datetime.min
            titulo = "üìä RELAT√ìRIO TOTAL"
            periodo_str = "Todos os tempos"
        else:
            await ctx.send("‚ùå Use: mensal, 30d, 7d ou total")
            return

        recrutadores_filtrados = {}
        for recrutador_id, recrutamentos in recrutamento_data.items():
            recrutamentos_filtrados = [r for r in recrutamentos if r['data_recrutamento'] >= primeiro_dia]
            if recrutamentos_filtrados:
                recrutadores_filtrados[recrutador_id] = recrutamentos_filtrados

        if not recrutadores_filtrados:
            embed = discord.Embed(title=titulo, description=f"**Per√≠odo:** {periodo_str}\nNenhum dado.", color=0x808080)
            await ctx.send(embed=embed)
            return

        recrutadores_ordenados = sorted(recrutadores_filtrados.items(), key=lambda x: len(x[1]), reverse=True)

        embed = discord.Embed(title=titulo, description=f"**Per√≠odo:** {periodo_str}", color=0x0099ff)

        for i, (recrutador_id, recrutamentos) in enumerate(recrutadores_ordenados[:10], 1):
            embed.add_field(
                name=f"#{i} - ID: {recrutador_id}",
                value=f"**Recrutamentos:** {len(recrutamentos)}",
                inline=True
            )

        total_recrutamentos = sum(len(r) for r in recrutadores_filtrados.values())
        embed.add_field(name="üìà ESTAT√çSTICAS", value=f"**Total:** {total_recrutamentos}\n**Recrutadores:** {len(recrutadores_filtrados)}", inline=False)

        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå Erro: {e}")

@bot.command()
@commands.has_permissions(administrator=True)
async def criarbotao(ctx):
    """Cria bot√£o do formul√°rio: !criarbotao"""
    try:
        canal = bot.get_channel(CONFIG['canal_formulario_id'])
        if canal:
            embed = discord.Embed(
                title="üìã FORMUL√ÅRIO DE RECRUTAMENTO",
                description="Clique para preencher o formul√°rio.",
                color=0x0099ff
            )
            view = IniciarFormularioView()
            await canal.send(embed=embed, view=view)
            await ctx.send("‚úÖ Bot√£o criado!")
    except Exception as e:
        await ctx.send(f"‚ùå Erro: {e}")

@bot.command()
async def ping(ctx):
    """Testa lat√™ncia: !ping"""
    latency = round(bot.latency * 1000)
    await ctx.send(f'üèì Pong! {latency}ms')

@bot.command()
async def status(ctx):
    """Status do bot: !status"""
    embed = discord.Embed(title="ü§ñ STATUS", color=0x00ff00)
    embed.add_field(name="üìä Servidores", value=len(bot.guilds), inline=True)
    embed.add_field(name="üë§ Usu√°rios", value=len(bot.users), inline=True)
    embed.add_field(name="üìã Formul√°rios", value=len(formularios_ativos), inline=True)
    embed.add_field(name="üìà Membros", value=len(registro_membros), inline=True)
    embed.add_field(name="‚öîÔ∏è A√ß√µes", value=len(acoes_ativas), inline=True)
    embed.add_field(name="üèì Lat√™ncia", value=f"{round(bot.latency * 1000)}ms", inline=True)
    await ctx.send(embed=embed)

@bot.command()
async def ajuda(ctx):
    """Ajuda: !ajuda"""
    embed = discord.Embed(title="üìã AJUDA", color=0x0099ff)
    
    embed.add_field(
        name="üë§ Comandos P√∫blicos",
        value="`!ping` `!status` `!ajuda` `!hierarquia` `!acoesativas`",
        inline=False
    )
    
    embed.add_field(
        name="‚öîÔ∏è Sistema de A√ß√µes", 
        value="`!acao 10 15/12 20:30 Nome`\n`!fecharacao ID`\n`!acoesativas`",
        inline=False
    )
    
    embed.add_field(
        name="üìä Relat√≥rios",
        value="`!relatorio [mensal|30d|7d|total]`",
        inline=False
    )
    
    embed.add_field(
        name="üëë Administrador",
        value="`!criarbotao` `!removerparticipante ID @user`",
        inline=False
    )
    
    await ctx.send(embed=embed)

# ========== EVENTOS ==========
@bot.event
async def on_ready():
    print(f'‚úÖ {bot.user.name} online!')
    bot.add_view(IniciarFormularioView())
    # Registrar a view das a√ß√µes tamb√©m
    for acao_id in acoes_ativas.keys():
        bot.add_view(AcaoView(acao_id))
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="!ajuda"))

@bot.event
async def on_member_join(member):
    try:
        if CONFIG['aguardando_cargo_id']:
            cargo = member.guild.get_role(CONFIG['aguardando_cargo_id'])
            if cargo:
                await member.add_roles(cargo)
                await registrar_log(member.guild, "üë§ NOVO MEMBRO", f"{member.mention} entrou", 0x00ff00)
    except Exception as e:
        print(f"Erro: {e}")

@bot.event
async def on_member_remove(member):
    if member.id in registro_membros:
        dados = registro_membros[member.id]
        await registrar_log(member.guild, "üö™ MEMBRO SAIU", f"**{member.name}** saiu\nRecrutador: {dados['id_recrutador']}", 0xffa500)
        del registro_membros[member.id]

async def registrar_log(guild, titulo, descricao, cor):
    try:
        canal = bot.get_channel(CONFIG['log_channel_id'])
        if canal:
            embed = discord.Embed(title=titulo, description=descricao, color=cor, timestamp=datetime.now())
            await canal.send(embed=embed)
    except:
        pass

if __name__ == "__main__":
    token = os.environ.get('DISCORD_TOKEN')
    if token:
        bot.run(token)
    else:
        print("‚ùå Token n√£o encontrado!")
